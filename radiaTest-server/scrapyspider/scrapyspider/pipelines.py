# Copyright (c) [2022] Huawei Technologies Co.,Ltd.ALL rights reserved.
# You can use it according to the terms and conditions of the Mulan PSL v2.
#          http://license.coscl.org.cn/MulanPSL2
# THIS PROGRAM IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
# EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
# MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.
# Part of codes were generated by scrapy startproject
####################################
# @Author  : Ethan-Zhang
# @email   : ethanzhang55@outlook.com
# @Date    : 2022/08/10 14:13:00
# @License : Mulan PSL v2
#####################################

# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html


# useful for handling different item types with a single interface
import configparser
import time
from pathlib import Path

import redis
from itemadapter import ItemAdapter

from scrapyspider.items import OpenqaHomeItem, OpenqaGroupOverviewItem, OpenqaTestsOverviewItem


class ScrapyspiderPipeline:
    def process_item(self, item, spider):
        return item


class RedisPipeline:
    def open_spider(self, spider):
        server_config_ini = Path(spider.settings.get("SERVER_INI_PATH"))
        cfg = configparser.ConfigParser()
        cfg.read(server_config_ini)

        host = cfg.get("redis", "REDIS_HOST")
        port = cfg.get("redis", "REDIS_PORT")
        try:
            db_index = int(cfg.get("redis", "REDIS_SCRAPYSPIDER_DB"))
        except ValueError:
            db_index = cfg.get("redis", "REDIS_DB")
        db_psd = cfg.get("redis", "REDIS_SECRET")

        self.db_conn = redis.StrictRedis(host=host, port=port, db=db_index, password=db_psd)

    def process_item(self, item, spider):
        if isinstance(item, OpenqaHomeItem):
            self.db_conn.set(
                "{}_group_overview_url".format(
                    item["product_name"]
                ), 
                item["group_overview_url"]
            )
            return item
        
        elif isinstance(item, OpenqaGroupOverviewItem):
            _build_time_array = time.strptime(item["build_time"], "%Y-%m-%dT%H:%M:%SZ")
            _build_time_stamp = int(time.mktime(_build_time_array))

            self.db_conn.zadd(
                item["product_name"],
                {
                    item["build_name"]: _build_time_stamp
                }
            )

            self.db_conn.set(
                "{}_{}_tests_overview_url".format(
                    item["product_name"],
                    item["build_name"]
                ),
                item["build_tests_url"]
            )
        
        elif isinstance(item, OpenqaTestsOverviewItem):
            _key = "{}_{}".format(
                item["product_build"],
                item["test"],
            )

            self.db_conn.hset(_key, "aarch64_res_status", item["aarch64_res_status"])
            self.db_conn.hset(_key, "aarch64_res_log", item["aarch64_res_log"])
            self.db_conn.hset(_key, "aarch64_failedmodule_name", item["aarch64_failedmodule_name"])
            self.db_conn.hset(_key, "aarch64_failedmodule_log", item["aarch64_failedmodule_log"])

            self.db_conn.hset(_key, "x86_64_res_status", item["aarch64_res_status"])
            self.db_conn.hset(_key, "x86_64_res_log", item["aarch64_res_log"])
            self.db_conn.hset(_key, "x86_64_failedmodule_name", item["aarch64_failedmodule_name"])
            self.db_conn.hset(_key, "x86_64_failedmodule_log", item["aarch64_failedmodule_log"])
            

    def close_item(self, spider):
        self.db_conn.connection_pool.disconnect()