[database]
; database settings

; if use mysql/mariadb as database, pymysql should be stated
; e.g. mysql+pymysql://[username]:[password]@[host]/[db]
; SQLALCHEMY_DATABASE_URI =

; pool size of database is directly relative to the concurrency limit
; the size should be appropriate to the server performance,
; an excessive pool size will lead to crash or worse performance 
; SQLALCHEMY_POOL_SIZE = 

[server]
; setting basic configs of radiaTest service
; SERVER_IP = 
; SERVER_PORT = 
; NGINX_LISTEN = 

[redis]
; setting redis as basic cache infrastructure for radiaTest service
; REDIS_HOST = 
; REDIS_PORT = 
; REDIS_SECRET = 
; REDIS_DB = 

[websockify]
; setting websockify, which works as bridge between TCP and Websocket
; use to transfer message for VNC service
; WEBSOCKIFY_LISTEN = 

[pxe]
; setting PXE server info
; PXE server is used to boot pmachine remotely
; PXE_IP = 
; PXE_SSH_USER = 
; PXE_SSH_PORT = 

; state private key file path used to set password-free ssh to pxe server
; PRIVATE_KEY = 

[storage]
; setting storage server info
; the storage server is working by rsyncd and httpd, not support other service
; setting basic info
; REPO_IP = 
; REPO_PORT = 

; setting the basename of HttpUrl of the storage location
; LOGS_ROOT_URL = 

; setting rsync configs
; RSYNC_USER = 
; RSYNC_MODULE = 
; RSYNC_PASSWORD = 
; RSYNC_PASSWORD_FILE = 

[gitee_oauth]
; setting necessary configs for gitee oauth service
; these configs work for common oauth login
; for the organizations which have enterprise id of gitee, these do not work
; checking these configs from the third-part app registered in https://gitee.com
; GITEE_OAUTH_CLIENT_ID = 
; GITEE_OAUTH_CLIENT_SECRET = 
; GITEE_OAUTH_REDIRECT_URI = 
; GITEE_OAUTH_HOME_URL = 

[token]
; setting to create user login token
; TOKEN_SECRET_KEY = 
; the unit of expire time is second(s)
; TOKEN_EXPIRES_TIME = 

[celery]
; setting the broker of celery worker
; we recommand use message queues as the broker, such as rabbitmq
; we do not ensure everything work normally as using redis or memcache
; e.g. BROKER_URL = amqp://[username:password]@[host]:[port]/[vhost]

; BROKER_URL = 

; setting the result backend of celery worker
; only support redis
; e.g. RESULT_BACKEND = redis://[:password]@[host]:[port]/[db]

; RESULT_BACKEND =

; setting the pubsub broker for socketio broadcast message queue
; only support message queue, redis or memcache is forbidden
; e.g. SOCKETIO_PUBSUB = amqp://[username:password]@[host]:[port]/[vhost]

; SOCKETIO_PUBSUB =

