[database]
; database settings

; if use mysql/mariadb as database, pymysql should be stated
; e.g. SQLALCHEMY_DATABASE_URI = mysql+pymysql://[username]:[password]@[host]/[db]

; pool size of database is directly relative to the concurrency limit.
; the size should be appropriate to the server performance,
; an excessive pool size will lead to worse performance 
; e.g. SQLALCHEMY_POOL_SIZE = 10240

[server]
; setting basic configs of radiaTest service
; SERVER_IP = 
; SERVER_PORT = 
; NGINX_LISTEN = 

[redis]
; setting redis as basic cache infrastructure for radiaTest service
; REDIS_HOST = 
; REDIS_PORT = 
; REDIS_SECRET = 
; REDIS_DB = 

[gitee_oauth]
; setting necessary configs for gitee oauth service
; these configs work for common oauth login
; for the organizations which have enterprise id of gitee, these do not work
; checking these configs from the third-part app registered in https://gitee.com
; GITEE_OAUTH_CLIENT_ID = 
; GITEE_OAUTH_CLIENT_SECRET = 
; GITEE_OAUTH_REDIRECT_URI = 
; GITEE_OAUTH_HOME_URL = 

[token]
; setting to create user login token
; TOKEN_SECRET_KEY = 
; the unit of expire time is second(s)
; TOKEN_EXPIRES_TIME = 

[celery]
; setting the broker of celery worker
; we recommand use message queues as the broker, such as rabbitmq
; we do not ensure everything work normally as using redis or memcache
; warning: the broker of server we recommand to be deployed on localhost,
; becase it should be different to the ones used by workers

; e.g. BROKER_URL = amqp://[username:password]@localhost:[port]/[vhost]

; setting the result backend of celery worker
; only support redis

; e.g. RESULT_BACKEND = redis://[:password]@[host]:[port]/[db]

; setting the pubsub broker for socketio broadcast message queue
; only support message queue, redis or memcache is forbidden
; e.g. SOCKETIO_PUBSUB = amqp://[username:password]@localhost:[port]/[vhost]

