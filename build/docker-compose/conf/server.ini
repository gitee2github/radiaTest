[database]
; database settings

; if use mysql/mariadb as database, pymysql should be stated
; SQLALCHEMY_DATABASE_URI = mysql+pymysql://root:1234@[host_ip]/radiaTest

; pool size of database is directly relative to the concurrency limit.
; the size should be appropriate to the server performance,
; an excessive pool size will lead to worse performance 
SQLALCHEMY_POOL_SIZE = 10240

[server]
; setting basic configs of radiaTest service
; SERVER_ADDR = domain | [host_ip]:[nginx_listen]
; whether the server address/domain has been verified by valid Certification Authority
CA_VERIFY = False
; radiaTest ca bundle certfile filepath. Necessary in any situation
; WARNING: if it has to be changed, make sure the construction process validation
CA_CERT = /etc/radiaTest/server_ssl/cacert.pem
; setting the root directory of CA
; WARNINGï¼šmake sure this directory is valid
CA_DIR = /etc/radiaTest/server_ssl

; setting server backend ip and port
; need setting as native Flask WsgiServer
; SERVER_IP = 
; SERVER_PORT = 

[at]
; OPENQA_URL = 

[pkglist]
; OPENEULER_OFFICIAL_REPO_URL =
; OPENEULER_DAILYBUILD_REPO_URL = 
; PRODUCT_PKGLIST_PATH = 

[redis]
; setting redis as basic cache infrastructure for radiaTest service
; REDIS_HOST = [host_ip]
REDIS_PORT = 6379
; REDIS_SECRET = [password]
REDIS_DB = 11
REDIS_SCRAPYSPIDER_DB = 5

[gitee_oauth]
; setting necessary configs for gitee oauth service
; these configs work for common oauth login
; for the organizations which have enterprise id of gitee, these do not work
; checking these configs from the third-part app registered in https://gitee.com
; GITEE_OAUTH_CLIENT_ID = xxxxxxxxx
; GITEE_OAUTH_CLIENT_SECRET = xxxxxxxxx
; GITEE_OAUTH_REDIRECT_URI = https://radiatest.openeuler.org/api/v1/gitee/oauth/callback
; GITEE_OAUTH_HOME_URL = https://radiatest.openeuler.org/login

[token]
; setting to create user login token
; TOKEN_SECRET_KEY = xxxxxxxxxx
; the unit of expire time is second(s)
; TOKEN_EXPIRES_TIME = 1800
; key of aes-decode
; WARNING: the aes key should be a hexademical string with 16, 24 or 32 bit
; AES_KEY = xxxxxxxxx

[celery]
; setting the broker of celery worker
; we recommand use message queues as the broker, such as rabbitmq
; we do not ensure everything work normally as using redis or memcache
; warning: the broker of server we recommand to be deployed on localhost,
; becase it should be different to the ones used by workers

BROKER_URL = amqp://radiaTest:1234@queue:5672/radiaTest

; setting the result backend of celery worker
; only support redis

; RESULT_BACKEND = redis://[:password]@[host_ip]:6379/10

; setting the crawl data backend of scrapyspider
; only support redis

; e.g. SCRAPYSPIDER = redis://[:password]@[host_ip]:6379/5

; setting the pubsub broker for socketio broadcast message queue
; only support message queue, redis or memcache is forbidden
SOCKETIO_PUBSUB = amqp://radiaTest:1234@queue:5672/radiaTest

[administrator]
; setting to login with admin account
;ADMIN_USERNAME =
; at least 8 characters
;ADMIN_PASSWORD =

